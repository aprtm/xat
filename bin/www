#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('xat:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Create webSockets server with socket.io
 */
var io = require('socket.io')(server);

var usersNsp = io.of('/users');
usersNsp.on('connection', usersConnection);

io.on('connection', onConnection);


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


/**
 * Event listener for socket connections
 */
function onConnection(socket){

  console.log('Connecting...')
  
  socket.on('userConnected', (userId) => {

  });

  socket.on('userDisconnected', (username)=> console.log(username, 'user disconnected.') );
  
  socket.on('disconnect', (reason)=>console.log(reason) );

  socket.on('chat message', (msg) => {
    console.log(msg);
    io.emit('chat message', msg);
  } );
  
}

function usersConnection( socket ){
  console.log('New connection with the Users namespace.');

  socket.on('userConnected', function onUserConnection( user ){

    socket.join( user._id );
    console.log( user.username, 'connected.');

    user.friends.forEach(function(friend){
      let contact = {
        id: user._id,
        name: user.username,
        pictureUrl: user.pictureUrl
      }
      socket.to(friend.id).emit('friendConnected', contact )
      console.log('Notified',friend.name);
    });

  });

}